
import DigitalImageProcess.Colors.RGBtoYIQ;
import DigitalImageProcess.Colors.YIQtoRGB;
import DigitalImageProcess.DigitalProcess;
import DigitalImageProcess.Effects.Bands;
import DigitalImageProcess.Effects.Negative;
import DigitalImageProcess.Effects.Thresholding;
import DigitalImageProcess.Filters.Average;
import DigitalImageProcess.Filters.Median;
import DigitalImageProcess.Filters.SobelGradient;
import DigitalImageProcess.Luminosity.AdditiveBrightnes;
import DigitalImageProcess.Luminosity.MultiplicativeBrightnes;
import DigitalImageProcess.Tools.Image;
import Memento.ApplicationState;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.EmptyStackException;
import java.util.Stack;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JRootPane;
import javax.swing.SwingConstants;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Jorismar
 */
public class ApplicationWindow extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public ApplicationWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        panel_presentation_image = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        selector_band_g_mono = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        selector_band_r_mono = new javax.swing.JRadioButton();
        button_laplaciano_filter = new javax.swing.JToggleButton();
        jLabel7 = new javax.swing.JLabel();
        button_thresholding_value = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        selector_yiq_space = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        selector_band_b_mono = new javax.swing.JRadioButton();
        slider_average_filter = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        selector_rgb_space = new javax.swing.JRadioButton();
        jSlider4 = new javax.swing.JSlider();
        button_custom_filter_1 = new javax.swing.JToggleButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jSlider5 = new javax.swing.JSlider();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        input_thresholding_value = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        button_custom_filter_2 = new javax.swing.JToggleButton();
        slider_median_filter = new javax.swing.JSlider();
        slider_add_brightness = new javax.swing.JSlider();
        slider_mult_brightness = new javax.swing.JSlider();
        jSlider1 = new javax.swing.JSlider();
        button_thresholding_average = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        label_add_brightness_value = new javax.swing.JLabel();
        label_mult_brightness_value = new javax.swing.JLabel();
        label_average_filter_value = new javax.swing.JLabel();
        label_median_filter_value = new javax.swing.JLabel();
        button_sobel = new javax.swing.JButton();
        button_negative = new javax.swing.JButton();
        button_apply = new javax.swing.JButton();
        button_revert = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_arquivo = new javax.swing.JMenu();
        item_open = new javax.swing.JMenuItem();
        item_salvar = new javax.swing.JMenuItem();
        item_salvar_como = new javax.swing.JMenuItem();
        menu_editar = new javax.swing.JMenu();
        item_undo = new javax.swing.JMenuItem();
        item_redo = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        item_undo_all = new javax.swing.JMenuItem();

        jButton3.setText("jButton3");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Processador Digital de Imagem");
        setMinimumSize(new java.awt.Dimension(1214, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        panel_presentation_image.setBackground(Color.GRAY);
        panel_presentation_image.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                panel_presentation_imageAncestorResized(evt);
            }
        });

        javax.swing.GroupLayout panel_presentation_imageLayout = new javax.swing.GroupLayout(panel_presentation_image);
        panel_presentation_image.setLayout(panel_presentation_imageLayout);
        panel_presentation_imageLayout.setHorizontalGroup(
            panel_presentation_imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 846, Short.MAX_VALUE)
        );
        panel_presentation_imageLayout.setVerticalGroup(
            panel_presentation_imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 636, Short.MAX_VALUE)
        );

        selector_band_g_mono.setText("G");
        selector_band_g_mono.setEnabled(false);
        selector_band_g_mono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selector_band_g_monoActionPerformed(evt);
            }
        });

        jLabel11.setText("M");

        jLabel5.setText("G");
        jLabel5.setEnabled(false);

        jLabel4.setText("R");
        jLabel4.setEnabled(false);

        selector_band_r_mono.setText("R");
        selector_band_r_mono.setEnabled(false);
        selector_band_r_mono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selector_band_r_monoActionPerformed(evt);
            }
        });

        button_laplaciano_filter.setText("Laplaciano");
        button_laplaciano_filter.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel7.setText("Brilho");

        button_thresholding_value.setText("Valor");
        button_thresholding_value.setEnabled(false);
        button_thresholding_value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_thresholding_valueActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel12.setText("Filtros");

        jLabel9.setText("Multiplicativo");

        selector_yiq_space.setText("YIQ");
        selector_yiq_space.setEnabled(false);
        selector_yiq_space.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selector_yiq_spaceActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel2.setText("Bandas");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("Espa√ßo de Cores");

        selector_band_b_mono.setText("B");
        selector_band_b_mono.setEnabled(false);
        selector_band_b_mono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selector_band_b_monoActionPerformed(evt);
            }
        });

        slider_average_filter.setMaximum(30);
        slider_average_filter.setMinimum(1);
        slider_average_filter.setToolTipText("???");
        slider_average_filter.setValue(slider_average_filter.getMinimum());
        slider_average_filter.setEnabled(false);
        slider_average_filter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_average_filterStateChanged(evt);
            }
        });
        slider_average_filter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                slider_average_filterMouseReleased(evt);
            }
        });

        jLabel6.setText("B");
        jLabel6.setEnabled(false);

        selector_rgb_space.setText("RGB");
        selector_rgb_space.setEnabled(false);
        selector_rgb_space.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selector_rgb_spaceActionPerformed(evt);
            }
        });

        jSlider4.setMaximum(255);
        jSlider4.setValue(127);
        jSlider4.setEnabled(false);

        button_custom_filter_1.setText("Filtro1");
        button_custom_filter_1.setEnabled(false);

        jLabel14.setText("Mediana");

        jLabel3.setText("Monocrom√°tico");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel10.setText("Limiariza√ß√£o");

        jSlider5.setMaximum(255);
        jSlider5.setValue(127);
        jSlider5.setEnabled(false);

        input_thresholding_value.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        input_thresholding_value.setText("0");
        input_thresholding_value.setEnabled(false);

        jLabel8.setText("Aditivo");

        button_custom_filter_2.setText("Filtro2");
        button_custom_filter_2.setEnabled(false);

        slider_median_filter.setMaximum(30);
        slider_median_filter.setMinimum(1);
        slider_median_filter.setValue(1);
        slider_median_filter.setEnabled(false);
        slider_median_filter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_median_filterStateChanged(evt);
            }
        });
        slider_median_filter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                slider_median_filterMouseReleased(evt);
            }
        });

        slider_add_brightness.setMaximum(255);
        slider_add_brightness.setMinimum(-255);
        slider_add_brightness.setValue(0);
        slider_add_brightness.setEnabled(false);
        slider_add_brightness.setPreferredSize(new java.awt.Dimension(148, 19));
        slider_add_brightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_add_brightnessStateChanged(evt);
            }
        });
        slider_add_brightness.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                slider_add_brightnessMouseReleased(evt);
            }
        });

        slider_mult_brightness.setMaximum(10);
        slider_mult_brightness.setMinimum(1);
        slider_mult_brightness.setValue(slider_mult_brightness.getMinimum());
        slider_mult_brightness.setEnabled(false);
        slider_mult_brightness.setPreferredSize(new java.awt.Dimension(148, 19));
        slider_mult_brightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_mult_brightnessStateChanged(evt);
            }
        });
        slider_mult_brightness.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                slider_mult_brightnessMouseReleased(evt);
            }
        });

        jSlider1.setMaximum(255);
        jSlider1.setValue(127);
        jSlider1.setEnabled(false);

        button_thresholding_average.setText("M√©dia");
        button_thresholding_average.setEnabled(false);

        jLabel13.setText("M√©dia");

        label_add_brightness_value.setForeground(new java.awt.Color(102, 102, 102));
        label_add_brightness_value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_add_brightness_value.setText("" + slider_add_brightness.getValue());
        label_add_brightness_value.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        label_mult_brightness_value.setForeground(new java.awt.Color(102, 102, 102));
        label_mult_brightness_value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_mult_brightness_value.setText("" + slider_mult_brightness.getValue());
        label_mult_brightness_value.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        label_average_filter_value.setForeground(new java.awt.Color(102, 102, 102));
        label_average_filter_value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_average_filter_value.setText("" + slider_average_filter.getValue());
        label_average_filter_value.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        label_median_filter_value.setForeground(new java.awt.Color(102, 102, 102));
        label_median_filter_value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_median_filter_value.setText("" + slider_median_filter.getValue());
        label_median_filter_value.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        button_sobel.setText("Sobel");
        button_sobel.setEnabled(false);
        button_sobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_sobelActionPerformed(evt);
            }
        });

        button_negative.setText("Negativo");
        button_negative.setEnabled(false);
        button_negative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_negativeActionPerformed(evt);
            }
        });

        button_apply.setText("Aplicar");
        button_apply.setEnabled(false);
        button_apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_applyActionPerformed(evt);
            }
        });

        button_revert.setText("Reverter");
        button_revert.setEnabled(false);
        button_revert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_revertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3)
                    .addComponent(jLabel10)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(button_sobel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_laplaciano_filter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_custom_filter_1))
                    .addComponent(jLabel7)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(button_negative)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_custom_filter_2))
                    .addComponent(jLabel12)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(selector_rgb_space)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selector_yiq_space))
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(button_apply, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(button_revert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_thresholding_value, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_thresholding_value)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_thresholding_average, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selector_band_r_mono)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selector_band_g_mono)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selector_band_b_mono))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slider_average_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(slider_median_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(label_median_filter_value, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_average_filter_value, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slider_add_brightness, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slider_mult_brightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_mult_brightness_value, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_add_brightness_value, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selector_rgb_space)
                    .addComponent(selector_yiq_space))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(selector_band_r_mono)
                    .addComponent(selector_band_g_mono)
                    .addComponent(selector_band_b_mono))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSlider5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(slider_add_brightness, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label_add_brightness_value))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(slider_mult_brightness, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(input_thresholding_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button_thresholding_value)
                            .addComponent(button_thresholding_average)))
                    .addComponent(label_mult_brightness_value))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13)
                            .addComponent(slider_average_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(label_average_filter_value))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(slider_median_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button_laplaciano_filter)
                            .addComponent(button_custom_filter_1)
                            .addComponent(button_sobel))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button_custom_filter_2)
                            .addComponent(button_negative))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label_median_filter_value))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button_revert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_apply, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        menu_arquivo.setText("Arquivo");

        item_open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        item_open.setText("Abrir");
        item_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_openActionPerformed(evt);
            }
        });
        menu_arquivo.add(item_open);

        item_salvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        item_salvar.setText("Salvar");
        item_salvar.setEnabled(false);
        item_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_salvarActionPerformed(evt);
            }
        });
        menu_arquivo.add(item_salvar);

        item_salvar_como.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        item_salvar_como.setText("Salvar como...");
        item_salvar_como.setEnabled(false);
        item_salvar_como.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_salvar_comoActionPerformed(evt);
            }
        });
        menu_arquivo.add(item_salvar_como);

        jMenuBar1.add(menu_arquivo);

        menu_editar.setText("Editar");

        item_undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        item_undo.setText("Desfazer");
        item_undo.setEnabled(false);
        item_undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_undoActionPerformed(evt);
            }
        });
        menu_editar.add(item_undo);

        item_redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        item_redo.setText("Refazer");
        item_redo.setEnabled(false);
        item_redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_redoActionPerformed(evt);
            }
        });
        menu_editar.add(item_redo);
        menu_editar.add(jSeparator6);

        item_undo_all.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        item_undo_all.setText("Desfazer Tudo");
        item_undo_all.setEnabled(false);
        item_undo_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_undo_allActionPerformed(evt);
            }
        });
        menu_editar.add(item_undo_all);

        jMenuBar1.add(menu_editar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panel_presentation_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_presentation_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selector_rgb_spaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selector_rgb_spaceActionPerformed
        if (!this.selector_rgb_space.isSelected()) {
            this.selector_rgb_space.setSelected(true);
            return;
        }
        this.selector_yiq_space.setSelected(false);
        this.processImage(this.yiq_to_rgb, null);
        this.current_state.setYIQSpace(false);
    }//GEN-LAST:event_selector_rgb_spaceActionPerformed

    private void selector_band_r_monoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selector_band_r_monoActionPerformed
        if (!this.selector_band_r_mono.isSelected()) {
            this.selector_band_r_mono.setSelected(true);
            return;
        }

        this.selector_band_g_mono.setSelected(false);
        this.selector_band_b_mono.setSelected(false);

        this.backupImageControler(this.selector_band_r_mono.getClass());
        BufferedImage img = this.backup_working_image;
        this.processImage(this.bands, new Color(255, 0, 0));
        this.backup_working_image = img;
        this.current_state.setBandSelector(this.selector_band_r_mono);
    }//GEN-LAST:event_selector_band_r_monoActionPerformed

    private void item_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_salvarActionPerformed
        try {
            this.save();
        } catch (IOException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_item_salvarActionPerformed

    private void selector_yiq_spaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selector_yiq_spaceActionPerformed
        if (!this.selector_yiq_space.isSelected()) {
            this.selector_yiq_space.setSelected(true);
            return;
        }

        this.selector_rgb_space.setSelected(false);

        this.processImage(this.rgb_to_yiq, null);
        this.current_state.setYIQSpace(true);
    }//GEN-LAST:event_selector_yiq_spaceActionPerformed

    private void selector_band_g_monoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selector_band_g_monoActionPerformed
        if (!this.selector_band_g_mono.isSelected()) {
            this.selector_band_g_mono.setSelected(true);
            return;
        }

        this.selector_band_r_mono.setSelected(false);
        this.selector_band_b_mono.setSelected(false);

        this.backupImageControler(this.selector_band_r_mono.getClass());
        BufferedImage img = this.backup_working_image;
        this.processImage(this.bands, new Color(0, 255, 0));
        this.backup_working_image = img;
        this.current_state.setBandSelector(this.selector_band_g_mono);
    }//GEN-LAST:event_selector_band_g_monoActionPerformed

    private void selector_band_b_monoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selector_band_b_monoActionPerformed
        if (!this.selector_band_b_mono.isSelected()) {
            this.selector_band_b_mono.setSelected(true);
            return;
        }

        this.selector_band_g_mono.setSelected(false);
        this.selector_band_r_mono.setSelected(false);

        this.backupImageControler(this.selector_band_r_mono.getClass());
        BufferedImage img = this.backup_working_image;
        this.processImage(this.bands, new Color(0, 0, 255));
        this.backup_working_image = img;
        this.current_state.setBandSelector(this.selector_band_b_mono);
    }//GEN-LAST:event_selector_band_b_monoActionPerformed

    private void slider_add_brightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_add_brightnessStateChanged
        this.label_add_brightness_value.setText("" + this.slider_add_brightness.getValue());
        this.backupImageControler(this.add_brightness.getClass());
        this.presentation_image = this.add_brightness.apply(this.working_image, this.slider_add_brightness.getValue());
    }//GEN-LAST:event_slider_add_brightnessStateChanged

    private void slider_mult_brightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_mult_brightnessStateChanged
        this.label_mult_brightness_value.setText("" + this.slider_mult_brightness.getValue());
        this.backupImageControler(this.mult_brightness.getClass());
        this.presentation_image = this.mult_brightness.apply(this.working_image, this.slider_mult_brightness.getValue());
    }//GEN-LAST:event_slider_mult_brightnessStateChanged

    private void panel_presentation_imageAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_panel_presentation_imageAncestorResized
        this.updatePresentationProperties();
    }//GEN-LAST:event_panel_presentation_imageAncestorResized

    private void button_thresholding_valueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_thresholding_valueActionPerformed
        //if(!this.is_yiq_space) {
        //    javax.swing.JOptionPane.showMessageDialog(rootPane, "A imagem precisa estar no espa√ßo de cor YIQ.", null, javax.swing.JOptionPane.ERROR_MESSAGE);
        //    return;
        //}

        try {
            int threasholding_value = Integer.parseInt(this.input_thresholding_value.getText());
            this.processImage(this.thresholding, threasholding_value);
            this.current_state.setThresholdingValue(threasholding_value);
        } catch (NumberFormatException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_thresholding_valueActionPerformed

    private void slider_average_filterMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slider_average_filterMouseReleased
        this.backupImageControler(this.average_filter.getClass());
        BufferedImage img = this.backup_working_image;
        int value = this.slider_average_filter.getValue();
        this.processImage(this.average_filter, value);
        this.backup_working_image = img;
        this.current_state.setAverageFilterValue(value);
    }//GEN-LAST:event_slider_average_filterMouseReleased

    private void slider_average_filterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_average_filterStateChanged
        this.label_average_filter_value.setText("" + this.slider_average_filter.getValue());
    }//GEN-LAST:event_slider_average_filterStateChanged

    private void slider_median_filterMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slider_median_filterMouseReleased
        this.backupImageControler(this.median_filter.getClass());
        BufferedImage img = this.backup_working_image;
        int value = this.slider_median_filter.getValue();
        this.processImage(this.median_filter, value);
        this.backup_working_image = img;
        this.current_state.setAverageFilterValue(value);
    }//GEN-LAST:event_slider_median_filterMouseReleased

    private void slider_median_filterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_median_filterStateChanged
        this.label_median_filter_value.setText("" + this.slider_median_filter.getValue());
    }//GEN-LAST:event_slider_median_filterStateChanged

    private void button_sobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_sobelActionPerformed
        this.processImage(this.sobel, null);
    }//GEN-LAST:event_button_sobelActionPerformed

    private void button_negativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_negativeActionPerformed
        this.processImage(this.negative, null);
    }//GEN-LAST:event_button_negativeActionPerformed

    private void button_applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_applyActionPerformed
        this.applyTransformations();
    }//GEN-LAST:event_button_applyActionPerformed

    private void button_revertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_revertActionPerformed
        this.revertTransformations();
    }//GEN-LAST:event_button_revertActionPerformed

    private void slider_add_brightnessMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slider_add_brightnessMouseReleased
        this.slider_add_brightness.setEnabled(false);
        int value = this.slider_add_brightness.getValue();
        //BufferedImage img = this.backup_working_image;
        this.processImage(null, null);
        //this.backup_working_image = img;
        this.current_state.setAddBrightnessValue(value);
        this.slider_add_brightness.setEnabled(true);
    }//GEN-LAST:event_slider_add_brightnessMouseReleased

    private void slider_mult_brightnessMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slider_mult_brightnessMouseReleased
        this.slider_mult_brightness.setEnabled(false);
        int value = this.slider_mult_brightness.getValue();
        //BufferedImage img = this.backup_working_image;
        this.processImage(null, null);
        //this.backup_working_image = img;
        this.current_state.setMultBrightnessValue(value);
        this.slider_mult_brightness.setEnabled(true);
    }//GEN-LAST:event_slider_mult_brightnessMouseReleased

    private void item_undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_undoActionPerformed
        this.undoState();
    }//GEN-LAST:event_item_undoActionPerformed

    private void item_redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_redoActionPerformed
        this.redoState();
    }//GEN-LAST:event_item_redoActionPerformed

    private void item_undo_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_undo_allActionPerformed
        this.undoAll();
    }//GEN-LAST:event_item_undo_allActionPerformed

    private void item_salvar_comoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_salvar_comoActionPerformed
        window_save_as.setTitle("Salvar como");
        window_save_as.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        window_save_as.setVisible(true);
    }//GEN-LAST:event_item_salvar_comoActionPerformed

    private void item_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_openActionPerformed
        window_open.setTitle("Abrir");
        window_open.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        window_open.setVisible(true);
    }//GEN-LAST:event_item_openActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed
    
    private void processImage(DigitalProcess process, Object arg) {
        //new Thread() {
            //public void run() {
                try {
                    ApplicationWindow.sem_processing.acquire();
                    {// ------ Critical Session ------
                        enableControls(false);
                        saveState();
                        if(process != null)
                            updateWorkImage(process.apply(working_image, arg));
                        else
                            updateWorkImage(presentation_image);
                        backup_working_image = working_image;
                        enableControls(true);
                    }// ------------------------------
                    ApplicationWindow.sem_processing.release();
                } catch (InterruptedException ex) {
                    Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            //}
        //}.start();
    }

    private boolean imageIsYIQ(FileReader file) {
        BufferedReader br = null;
        String line = "";
        
        try {
            String sCurrentLine;

            br = new BufferedReader(file);

            while ((sCurrentLine = br.readLine()) != null) {
                line = sCurrentLine;
            }
        } catch (IOException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return line.equals(this.yiq_mark);
    }

    private void save() throws IOException {
        try {
            String filename = this.img_file.getPath();
            String filetype;
            
            // Get file extension type
            filetype = filename.substring(filename.length() - 3);
            System.out.println(filetype);
            // Write file
            ImageIO.write(this.working_image, filetype, this.img_file);

            // Add YIQ mark
            if(this.current_state.isYIQ())
                Files.write(img_file.toPath(), ("\n" + this.yiq_mark).getBytes(), StandardOpenOption.APPEND);

            // Apply transformations
            this.applyTransformations();
        } catch (NoSuchFileException ex) {
            throw ex;
        } catch (IOException ex) {
            throw ex;
        }    
    }
    
    public void saveAs(File file) {
        File bkp_file = this.img_file;
        
        try {
            String filename = file.getPath();
            String filetype;

            if((filename.length() <= 4) || (filename.length() > 4 && filename.charAt(filename.length() - 4) != '.')) {
                filetype = "png";
                filename += "." + filetype;
            }

            this.img_file = new File(filename);
            this.save();

            this.setTitle(this.img_file.getName() + " - Processador Digital de Imagem");
        } catch (NoSuchFileException ex) {
            this.img_file = bkp_file;
            JOptionPane.showMessageDialog(null, "Nome de arquivo inv√°lido.", " ERRO", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            this.img_file = bkp_file;
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void openImageFile(File file) {
        try {
            ApplicationWindow.sem_processing.acquire();
            {// ------ Critical Session ------
                // Open selected image
                this.img_file = file;
                this.working_image = ImageIO.read(file);
                this.backup_working_image = this.working_image;
                this.setTitle(file.getName() + " - Processador Digital de Imagem");

                // Init a new session
                this.current_state = new ApplicationState();
                this.initial_state = new ApplicationState();

                this.undo_states.clear();
                this.redo_states.clear();

                // Disable/Enable buttons
                this.item_undo.setEnabled(false);
                this.item_undo_all.setEnabled(false);
                this.item_redo.setEnabled(false);
                this.item_salvar.setEnabled(true);
                this.item_salvar_como.setEnabled(true);

                // Check space color
                this.current_state.setYIQSpace(imageIsYIQ(new FileReader(file)));

                // Update states
                this.current_state.setImage(this.working_image);

                // Update presentation properties
                updatePresentationProperties();

                // Update presentation image
                this.presentation_image = this.working_image;
            }// ------------------------------
            ApplicationWindow.sem_processing.release();

            // Restore initial state
            this.restoreState(this.current_state);
            this.initial_state.clone(this.current_state);
            this.enableControls(true);
        } catch (IOException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updatePresentationProperties() {
        if (this.working_image == null)
            return;

        // Get panel dimensions
        int presentation_panel_height = panel_presentation_image.getHeight();
        int presentation_panel_width = panel_presentation_image.getWidth();

        // Resize image to panel size
        if (presentation_panel_height > presentation_panel_width) {
            this.work_image_w = presentation_panel_width;
            this.work_image_h = Image.getProportionalHeight(this.working_image.getHeight(), this.working_image.getWidth(), this.work_image_w);
        } else {
            this.work_image_h = presentation_panel_height;
            this.work_image_w = Image.getProportionalWidth(this.working_image.getHeight(), this.working_image.getWidth(), this.work_image_h);
        }

        // Check if image exced panel limits
        if (this.work_image_h > presentation_panel_height) {
            this.work_image_h = presentation_panel_height;
            this.work_image_w = Image.getProportionalWidth(this.working_image.getHeight(), this.working_image.getWidth(), this.work_image_h);
        } else if (this.work_image_w > presentation_panel_width) {
            this.work_image_w = presentation_panel_width;
            this.work_image_h = Image.getProportionalHeight(this.working_image.getHeight(), this.working_image.getWidth(), this.work_image_w);
        }

        // Get center position
        this.work_image_x = (presentation_panel_width - this.work_image_w) / 2;
        this.work_image_y = (presentation_panel_height - this.work_image_h) / 2;

        // Get graphics from component
        this.showed_image = panel_presentation_image.getGraphics();
        panel_presentation_image.paintComponents(this.showed_image);

        // Clear last paint
        this.showed_image.setColor(Color.GRAY);
        this.showed_image.fillRect(0, 0, presentation_panel_width, presentation_panel_height);
    }

    private void updateWorkImage(BufferedImage img) {
        // Update image
        this.working_image = img;
        this.presentation_image = img;
        this.current_state.setImage(img);
    }

    private void refreshPanelImage() {
        if (this.presentation_image == null)
            return;

        // Paint the image
        this.showed_image.drawImage(this.presentation_image, this.work_image_x, this.work_image_y, this.work_image_w, this.work_image_h, this);
    }

    private void backupImageControler(Class requester) {
        // If the requester is the last backup owner, the state will be restored.
        if (this.backup_owner == requester) {
            this.working_image = Image.clone(this.backup_working_image);
        }

        // If not, update state.
        this.backup_owner = requester;
        this.backup_working_image = Image.clone(this.working_image);
    }

    private void applyTransformations() {
        ApplicationState state = new ApplicationState();

        state.setYIQSpace(this.current_state.isYIQ());
        state.setImage(this.working_image);

        this.initial_state.clone(state);

        this.redo_states.clear();
        this.item_redo.setEnabled(false);

        // Restore default state
        this.restoreState(state);
    }

    private void revertTransformations() {
        this.redo_states.clear();
        this.item_redo.setEnabled(false);

        ApplicationState state = new ApplicationState();
        state.clone(this.initial_state);
        
        this.restoreState(state);
    }
    
    private void undoState() {
        if(this.undo_states.empty())
            return;
        
        try {
            // Save current state
            this.redo_states.push(this.current_state);

            // Restore stored state
            this.restoreState(this.undo_states.pop());
            
            // Enable item menu Redo
            this.item_redo.setEnabled(true);
            
            // Disable itens menu Undo/UndoAll
            if(this.undo_states.empty()) {
                this.item_undo.setEnabled(false);
                this.item_undo_all.setEnabled(false);
            }
        } catch (EmptyStackException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void undoAll() {
        this.redo_states.push(this.current_state);
        
        while(!this.undo_states.empty())
            this.redo_states.push(this.undo_states.pop());
        
        this.restoreState(this.redo_states.pop());

        // Enable item menu Redo
        this.item_redo.setEnabled(true);

        // Disable itens menu Undo/UndoAll
        this.item_undo.setEnabled(false);
        this.item_undo_all.setEnabled(false);
    }
    
    private void redoState() {
        if(this.redo_states.empty())
            return;
        
        try {
            // Save current state
            this.undo_states.push(this.current_state);
            
            // Restore state
            this.restoreState(this.redo_states.pop());
            
            // Enable item menu Redo
            this.item_undo.setEnabled(true);
            this.item_undo_all.setEnabled(true);
            
            // Disable itens menu Redo
            if(this.redo_states.empty()) 
                this.item_redo.setEnabled(false);
        } catch (EmptyStackException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void saveState() {
        ApplicationState state = new ApplicationState();
        
        state.clone(this.current_state);
        
        this.undo_states.push(state);

        if(!this.redo_states.empty())
            this.redo_states.clear();
        
        this.item_undo.setEnabled(true);
        this.item_undo_all.setEnabled(true);
    }
    
    private void restoreState(ApplicationState state) {
        try {
            ApplicationWindow.sem_processing.acquire();
            {// ------ Critical Session ------
                this.enableControls(false);

                this.current_state = state;
                
                this.selector_rgb_space.setSelected(!state.isYIQ());
                this.selector_yiq_space.setSelected(state.isYIQ());

                this.selector_band_r_mono.setSelected(false);
                this.selector_band_g_mono.setSelected(false);
                this.selector_band_b_mono.setSelected(false);

                if(state.getBandSelector() != null)
                    state.getBandSelector().setSelected(true);

                this.slider_add_brightness.setValue(state.getAddBrightnessValue());
                this.label_add_brightness_value.setText("" + state.getAddBrightnessValue());

                this.slider_mult_brightness.setValue(state.getMultBrightnessValue());
                this.label_mult_brightness_value.setText("" + state.getMultBrightnessValue());

                this.input_thresholding_value.setText("" + state.getThresholdingValue());

                this.slider_average_filter.setValue(state.getAverageFilterValue());
                this.label_average_filter_value.setText("" + state.getAverageFilterValue());

                this.slider_median_filter.setValue(state.getMedianFilterValue());
                this.label_median_filter_value.setText("" + state.getMedianFilterValue());

                this.updateWorkImage(state.getImage());
                
                this.backup_working_image = this.working_image;

                this.enableControls(true);
            }// ------------------------------
            ApplicationWindow.sem_processing.release();
        } catch (InterruptedException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void enableControls(boolean enable) {
        this.selector_rgb_space.setEnabled(enable);
        this.selector_yiq_space.setEnabled(enable);
        this.selector_band_r_mono.setEnabled(enable);
        this.selector_band_g_mono.setEnabled(enable);
        this.selector_band_b_mono.setEnabled(enable);
        this.slider_add_brightness.setEnabled(enable);
        this.slider_mult_brightness.setEnabled(enable);
        this.input_thresholding_value.setEnabled(enable);
        this.button_thresholding_value.setEnabled(enable);
        //this.button_thresholding_average.setEnabled(enable);
        this.slider_average_filter.setEnabled(enable);
        this.slider_median_filter.setEnabled(enable);
        this.button_sobel.setEnabled(enable);
        //this.button_laplaciano_filter.setEnabled(enable);
        //this.button_custom_filter_1.setEnabled(enable);
        //this.button_custom_filter_2.setEnabled(enable);
        this.button_negative.setEnabled(enable);
        this.button_apply.setEnabled(enable);
        this.button_revert.setEnabled(enable);
        this.menu_arquivo.setEnabled(enable);
        this.menu_editar.setEnabled(enable);
        //this.file_manager.setEnabled(enable);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ApplicationWindow window = new ApplicationWindow();
                ApplicationWindow.window_application = window;
                // Thread to refresh image
                new Thread() {
                    public void run() {
                        while (true) {
                            try {
                                ApplicationWindow.sem_processing.acquire();
                                // ------ Critical Session ------
                                    window.refreshPanelImage();
                                // ------------------------------
                                ApplicationWindow.sem_processing.release();
                                
                                Thread.sleep(200);
                            } catch (Exception ex) {
                                Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }.start();

                window.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_apply;
    private javax.swing.JToggleButton button_custom_filter_1;
    private javax.swing.JToggleButton button_custom_filter_2;
    private javax.swing.JToggleButton button_laplaciano_filter;
    private javax.swing.JButton button_negative;
    private javax.swing.JButton button_revert;
    private javax.swing.JButton button_sobel;
    private javax.swing.JButton button_thresholding_average;
    private javax.swing.JButton button_thresholding_value;
    private javax.swing.JTextField input_thresholding_value;
    private javax.swing.JMenuItem item_open;
    private javax.swing.JMenuItem item_redo;
    private javax.swing.JMenuItem item_salvar;
    private javax.swing.JMenuItem item_salvar_como;
    private javax.swing.JMenuItem item_undo;
    private javax.swing.JMenuItem item_undo_all;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider4;
    private javax.swing.JSlider jSlider5;
    private javax.swing.JLabel label_add_brightness_value;
    private javax.swing.JLabel label_average_filter_value;
    private javax.swing.JLabel label_median_filter_value;
    private javax.swing.JLabel label_mult_brightness_value;
    private javax.swing.JMenu menu_arquivo;
    private javax.swing.JMenu menu_editar;
    private javax.swing.JPanel panel_presentation_image;
    private javax.swing.JRadioButton selector_band_b_mono;
    private javax.swing.JRadioButton selector_band_g_mono;
    private javax.swing.JRadioButton selector_band_r_mono;
    private javax.swing.JRadioButton selector_rgb_space;
    private javax.swing.JRadioButton selector_yiq_space;
    private javax.swing.JSlider slider_add_brightness;
    private javax.swing.JSlider slider_average_filter;
    private javax.swing.JSlider slider_median_filter;
    private javax.swing.JSlider slider_mult_brightness;
    // End of variables declaration//GEN-END:variables

    // Internal Image Control
    private BufferedImage working_image = null;         // Working image (used during transformations)
    private BufferedImage backup_working_image = null;  // Storage the last transformation
    private BufferedImage presentation_image = null;    // Presentation image

    // Control Properties
    private Class backup_owner = null;      // Backup image owner
    private final static Semaphore sem_processing = new Semaphore(1);
    private String yiq_mark = "JB-YIQ";
    
    // States Edition Control
    private Stack<ApplicationState> undo_states = new Stack<>();      // Undo editions controller
    private Stack<ApplicationState> redo_states = new Stack<>();      // Redo editions controller
    private ApplicationState current_state;  // Current state
    private ApplicationState initial_state;

    // Presentation Panel Properties
    private Graphics showed_image;
    private int work_image_x;
    private int work_image_y;
    private int work_image_h;
    private int work_image_w;

    // Digital Image Processing
    private final RGBtoYIQ rgb_to_yiq = new RGBtoYIQ();         // RGB to YIQ converter
    private final YIQtoRGB yiq_to_rgb = new YIQtoRGB();         // YIQ to RGB converter
    private final Bands bands = new Bands();                    // Bands controller
    private final AdditiveBrightnes add_brightness = new AdditiveBrightnes();     // Additive Brightness controller
    private final MultiplicativeBrightnes mult_brightness = new MultiplicativeBrightnes();    // Multiplicative Brightness controller
    private final Thresholding thresholding = new Thresholding();   // Thresholding (Limiariza√ß√£o)
    private final Average average_filter = new Average();       // Average filter
    private final Median median_filter = new Median();          // Median filter
    private final SobelGradient sobel = new SobelGradient();    // Sobel filter
    private final Negative negative = new Negative();           // Negative transformation
    
    // Image Properties
    private File img_file;

    // Extern Windows
    private final SaveWindow window_save_as = new SaveWindow();
    private final OpenWindow window_open = new OpenWindow();
    public static ApplicationWindow window_application;
}
